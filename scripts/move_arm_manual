#!/usr/bin/env python
"""
Moves gripper to random manually input positions for testing

+ Uses `baxter_interface` to verify that the robot is enabled
+ Uses `limb_interface` to control each arm with move_to_joint_positions
+ Uses `gripper_interface` to calibrate the gripper

"""

import sys
import copy
import rospy
import numpy as np

# moveit
import moveit_commander
import moveit_msgs.msg
from geometry_msgs.msg import Pose
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list

import baxter_interface

class find_block(object):
    def __init__(self):
        # initialize moveit commander
        moveit_commander.roscpp_initialize(sys.argv)
        robot = moveit_commander.RobotCommander()
        scene = moveit_commander.PlanningSceneInterface()
        group_name = 'left_arm'
        group = moveit_commander.MoveGroupCommander(group_name)
        display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                               moveit_msgs.msg.DisplayTrajectory,
                                               queue_size=20)

        # print basic info for debugging
        # We can get the name of the reference frame for this robot:
        planning_frame = group.get_planning_frame()
        print "============ Reference frame: %s" % planning_frame

        # We can also print the name of the end-effector link for this group:
        eef_link = group.get_end_effector_link()
        print "============ End effector: %s" % eef_link

        # We can get a list of all the groups in the robot:
        group_names = robot.get_group_names()
        print "============ Robot Groups:", robot.get_group_names()

        # Sometimes for debugging it is useful to print the entire state of the
        # robot:
        print "============ Printing robot state"
        print robot.get_current_state()
        print ""
        
        for i in range(3):
            # get goal 
            goal = self.get_location(i)

            # plan motion to goal
            group.set_pose_target(goal)

            # compute and execute plan
            plan = group.go(wait=True)
            # Calling `stop()` ensures that there is no residual movement
            group.stop()
            # It is always good to clear your targets after planning with poses.
            # Note: there is no equivalent function for clear_joint_value_targets()
            group.clear_pose_targets()

        rospy.spin()

    def get_location(self,pose):
        # goals match l_gripper_l_finger_tip under links in RVIZ
        block_pose1 = Pose()
        block_pose1.position.x = 0.639
        block_pose1.position.y = -0.025
        block_pose1.position.z = -0.007
        block_pose1.orientation.x = 0.141
        block_pose1.orientation.y = 0.990
        block_pose1.orientation.z = 0.003
        block_pose1.orientation.w = 0.028

        block_pose2 = Pose()
        block_pose2.position.x = 0.523 
        block_pose2.position.y = 0.835
        block_pose2.position.z = 0.05
        block_pose2.orientation.x = 0.141
        block_pose2.orientation.y = 0.990
        block_pose2.orientation.z = 0.003
        block_pose2.orientation.w = 0.028

        block_pose3 = Pose()
        block_pose3.position.x = 0.447
        block_pose3.position.y = 0.195
        block_pose3.position.z = -0.138
        block_pose3.orientation.x = 0.141
        block_pose3.orientation.y = 0.990
        block_pose3.orientation.z = 0.003
        block_pose3.orientation.w = 0.028

        if pose == 0:
            block_pose = block_pose1
        elif pose == 1:
            block_pose = block_pose2
        elif pose == 2:
            block_pose = block_pose3
        return block_pose

if __name__ == '__main__':
    try: 
        rospy.init_node('find_block',anonymous=True)
        block_loc = find_block()
    except rospy.ROSInterruptException:
        pass
