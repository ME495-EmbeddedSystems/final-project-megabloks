#!/usr/bin/env python

"""
New_find_block: robot use pick and place position to assemble the block

PUBLISHERS:
  + /move_group/display_planned_path (moveit_msgs.msg.DisplayTrajectory) ~ publish the robot moving trajectory to control the robot motion

SERVICE:
  + /blocks/next_pickup (GetBlockPosition) ~ let the computer vision know when it is ready to get block positon, and read the block positon from computer vision.

"""
import sys
import copy
import rospy
import numpy as np

from blocks.srv import GetBlockPosition

import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list

import baxter_interface
import tf

class find_block(object):
    def __init__(self):
        rospy.wait_for_service('/blocks/next_pickup')
        self.model_coords = rospy.ServiceProxy('/blocks/next_pickup',GetBlockPosition)
        joint_state_topic = ['joint_states:=/robot/joint_states']
        rospy.init_node('find_block',anonymous=True)
        moveit_commander.roscpp_initialize(joint_state_topic)
        moveit_commander.roscpp_initialize(sys.argv)
        robot = moveit_commander.RobotCommander()
        # scene = moveit_commander.PlanningSceneInterface()
        group_name = 'left_arm'
        group_name1 = 'right_arm'
        group = moveit_commander.MoveGroupCommander(group_name)
        group1 = moveit_commander.MoveGroupCommander(group_name1)

        display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                               moveit_msgs.msg.DisplayTrajectory,
                                               queue_size=20)

        # planning_frame = group.get_planning_frame()
        # print "============ Reference frame: %s" % planning_frame

        print "============ Printing robot state"
        print robot.get_current_state()
        print ""

        self.robot = robot
        self.group = group
        self.group1 = group1
        self._gripper = baxter_interface.Gripper("left", baxter_interface.CHECK_VERSION)
        self._gripper.set_dead_band(0.25)


    # def get_location(self,model):
    #     self.object_coords = self.model_coords(model,'')
    #     x_pos = self.object_coords.pose.position.x
    #     y_pos = self.object_coords.pose.position.y
    #     z_pos = self.object_coords.pose.position.z
    #     return [x_pos, y_pos, z_pos]

    def go_to_pose_goal_1(self,position,orientation):
        group = self.group

        pose_goal = geometry_msgs.msg.Pose()
        pose_goal.orientation.x = orientation[0]
        pose_goal.orientation.y = orientation[1]
        pose_goal.orientation.z = orientation[2]
        pose_goal.orientation.w = orientation[3]
        pose_goal.position.x = position[0]
        pose_goal.position.y = position[1]
        pose_goal.position.z = position[2]
        group.set_pose_target(pose_goal)

        plan = group.go(wait=True)
        group.stop()
        group.clear_pose_targets()

    def go_to_pose_goal_2(self,orientation):
        group = self.group
        pose_goal = group.get_current_pose().pose

        get_orientation = np.array([pose_goal.orientation.x,pose_goal.orientation.y,pose_goal.orientation.z,pose_goal.orientation.w])
        current_orientation = tf.transformations.euler_from_quaternion(get_orientation) # 1.57079632
        if current_orientation[1] < 0:
            sign = -1
        else:
            sign = 1

        quaternion = tf.transformations.quaternion_from_euler(-np.pi,0,orientation[0]*sign) # 1.57079632
        pose_goal.orientation.x = quaternion[0]
        pose_goal.orientation.y = quaternion[1]
        pose_goal.orientation.z = quaternion[2]
        pose_goal.orientation.w = quaternion[3]
        # pose_goal.orientation.x = orientation[0]
        # pose_goal.orientation.y = orientation[1]
        # pose_goal.orientation.z = orientation[2]
        # pose_goal.orientation.w = orientation[3]
        group.set_pose_target(pose_goal)

        plan = group.go(wait=True)
        group.stop()
        group.clear_pose_targets()

    # plan _1 go -z direction
    def plan_cartesian_path_1(self, scale=1):
        group = self.group
        waypoints = []

        wpose = group.get_current_pose().pose
        wpose.position.z += scale * 0.1  # First move down (z)
        waypoints.append(copy.deepcopy(wpose))

        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    # plan_2 go +z direction
    def plan_cartesian_path_2(self, scale=1):
        group = self.group
        waypoints = []

        wpose = group.get_current_pose().pose
        wpose.position.z -= scale * 0.1  # First move up (z)
        waypoints.append(copy.deepcopy(wpose))
        # group.set_max_velocity_scaling_factor(0.2)
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    # plan_3 go to horizontal direction
    def plan_cartesian_path_3(self, place_block_position, scale=1):
        group = self.group
        waypoints = []
        # get current state
        wpose = group.get_current_pose().pose
        # find the difference between current state and y_direction
        y_distance = place_block_position[0][1]- wpose.position.y
        # find the difference between current state and x_direction
        x_distance = place_block_position[0][0]- wpose.position.x
        wpose.position.y -= scale * y_distance  # move towards right "-",
        wpose.position.x -= scale * x_distance
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction


    # this cartesian_plan find the difference Z of place and pick positions
    def plan_cartesian_path_4(self,place_block_position, scale=1):
        group = self.group
        waypoints = []

        wpose = group.get_current_pose().pose
        z_distance = place_block_position[0][2]- wpose.position.z
        wpose.position.z -= scale * z_distance  # First move down (z)
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    def plan_cartesian_path_5(self,scale=1):
        group1 = self.group1
        waypoints = []
        # get current state
        y_distance = 0.4
        x_distance = 0.15
        # find the difference between current state and x,y_direction
        wpose = group1.get_current_pose().pose
        wpose.position.y += scale * y_distance  # move towards right "-",
        wpose.position.x += scale * x_distance
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group1.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction



    # control right arm back
    def plan_cartesian_path_6(self,scale=1):
        group1 = self.group1
        waypoints = []
        # get current state
        y_distance = 0.4
        x_distance = 0.15
        # find the difference between current state and x,y_direction
        wpose = group1.get_current_pose().pose
        wpose.position.y -= scale * y_distance  # move towards right "-",
        wpose.position.x -= scale * x_distance
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group1.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    def plan_cartesian_path_7(self,scale=1):
        group = self.group
        waypoints = []
        # get current state
        y_distance = 0.3
        x_distance = 0.3
        # find the difference between current state and y_direction
        # find the difference between current state and x_direction
        wpose = group.get_current_pose().pose
        wpose.position.y -= scale * y_distance  # move towards right "-",
        wpose.position.x += scale * x_distance
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    def execute_plan(self, plan):
        group = self.group
        group.execute(plan, wait=True)

    def execute_plan1(self, plan):
        group1 = self.group1
        group1.execute(plan, wait=True)

    def gripper_close(self):
        self._gripper.close()


    def gripper_open(self):
        self._gripper.open()


    def force_control(self,reset):
        current_force = self._gripper.parameters()['moving_force']
        print("current force {}" .format(current_force))
        offset = 40.0

        if reset == 1:
            a = 10.0
            holdforce = 40.0
        else:
            a = current_force + offset
            holdforce = 50.0

        self._gripper.set_holding_force(holdforce)
        self._gripper.set_moving_force(a)
        current_force = self._gripper.parameters()['moving_force']
        dead_zone = self._gripper.parameters()['dead_zone']
        holding_force = self._gripper.parameters()['holding_force']

        print("holding_force {}" .format(holding_force))
        print("new_current force {}" .format(current_force))
        print(" dead_zone {}" .format(dead_zone))

    def pick_and_place(self, pick_block_position, place_block_position):


        print "============ Press `Enter` to move away right arm..."
        raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_5(scale=-1)
        self.execute_plan1(cartesian_plan)
        # print "============ Press `Enter` to go above pick position ..."
        # raw_input()
        rospy.sleep(2)
        self.force_control(1)
        pick_position1 = copy.copy(pick_block_position[0])
        pick_position1[2] = pick_position1[2]+0.1
        pick_orientation_1 = copy.copy(pick_block_position[1])
        self.go_to_pose_goal_1(pick_position1,pick_orientation_1)
        # print "============ Press `Enter` to go down ..."
        # raw_input()
        rospy.sleep(2)
        cartesian_plan, fraction = self.plan_cartesian_path_1(scale=-1)
        self.execute_plan(cartesian_plan)
        # print "============ Press `Enter` to close gripper  ..."
        # raw_input()
        rospy.sleep(2)
        self.gripper_close()
        rospy.sleep(2)
        # print "============ Press `Enter` to go up ..."
        # raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_2(scale=-1)
        self.execute_plan(cartesian_plan)
        rospy.sleep(2)
        # print "============ Press `Enter` to go x and y position tarward the position to drop box..."
        # raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_3(place_block_position, scale=-1)
        self.execute_plan(cartesian_plan)
        rospy.sleep(1)
        # print "============ Press `Enter` to go above place position ..."
        # raw_input()
        place_orientation_1 = copy.copy(place_block_position[1])
        self.go_to_pose_goal_2(place_orientation_1)


        # print "============ Press `Enter` to go vertical  and add force..."
        # raw_input()
        rospy.sleep(3)
        self.force_control(0)
        cartesian_plan, fraction = self.plan_cartesian_path_4(place_block_position,scale=-1)
        self.execute_plan(cartesian_plan)

        self.force_control(1)
        rospy.sleep(5)
        self.gripper_open()
        # print "============ Press `Enter` to go up.."
        # raw_input()
        rospy.sleep(2)
        cartesian_plan, fraction = self.plan_cartesian_path_2(scale=-1)
        self.execute_plan(cartesian_plan)
        rospy.sleep(2)
        # print "============ Press `Enter` to close gripper  ..."
        # raw_input()
        self.gripper_close()
        self.force_control(0)
        rospy.sleep(2)
        # print "============ Press `Enter` to go down ..."
        # raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_1(scale=-1)
        self.execute_plan(cartesian_plan)
        rospy.sleep(5)
        print "============  to go up ..."

        cartesian_plan, fraction = self.plan_cartesian_path_2(scale=-1)
        self.execute_plan(cartesian_plan)
        self.force_control(1)
        self.gripper_open()
        # print "============ Press `Enter` to move away left arm..."
        # raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_7(scale=-1)
        self.execute_plan(cartesian_plan)

        # print "============ Press `Enter` to move right arm back..."
        # raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_6(scale=-1)
        self.execute_plan1(cartesian_plan)
        rospy.sleep(3)


    def pick_position_srv(self,sign):
        gripper_offset_x = 0 #0.02
        gripper_offset_y = -0.006 #0.01

        check = 0
        while check == 0:
            block_positions = self.model_coords()
            if block_positions.block_pose.x < 0.65:
                check = 1

        print ("pick_position{}" .format(block_positions))
        if block_positions.block_pose.theta == 1:
            block_positions.block_pose.theta = -np.pi/2*sign
            sign *=-1

        orientation = tf.transformations.quaternion_from_euler(-np.pi,0,block_positions.block_pose.theta) # 1.57079632
        print("orientation{}" .format(orientation))

        pose_goal = [[0,0,0],[0,0,0,0]]
        pose_goal[0][0] = block_positions.block_pose.x + gripper_offset_x
        pose_goal[0][1] = block_positions.block_pose.y + gripper_offset_y
        pose_goal[0][2] = self.pick_block_height

        pose_goal[1][0] = orientation[0]
        pose_goal[1][1]= orientation[1]
        pose_goal[1][2] = orientation[2]
        pose_goal[1][3] = orientation[3]

        return sign, pose_goal


    def get_place_position(self):
        table_offset = -0.0002
        # get block position x, y and rotation angle
        block_positions = rospy.get_param("tower")
        sign = 1

        x_offset = 0.11
        for i in range (len(block_positions)):
            if block_positions[i][2] == 1:
                block_positions[i][2] = np.pi/2 #*sign
                #sign *=-1

        block_position1 = block_positions[0]
        block_position2 = block_positions[1]
        block_position3 = block_positions[2]

        print("block_position1{}" .format(block_position1))
        print("block_position2{}" .format(block_position2))
        print("block_position3{}" .format(block_position3))

        # quaternion1 = tf.transformations.quaternion_from_euler(-np.pi,0,block_position1[2]) # 1.57079632
        # quaternion2 = tf.transformations.quaternion_from_euler(-np.pi,0,block_position2[2]) # 1.57079632
        # quaternion3 = tf.transformations.quaternion_from_euler(-np.pi,0,block_position3[2]) # 1.57079632

        # print("quaternion1{}" .format(quaternion))
        # place_block_position1 = [[block_position1[0]-x_offset,block_position1[1],-0.20764+table_offset],[float(quaternion1[0]),float(quaternion1[1]),float(quaternion1[2]),float(quaternion1[3])]]
        # place_block_position2 = [[block_position2[0]-x_offset-0.01,block_position2[1],-0.20764+table_offset],[float(quaternion2[0]),float(quaternion2[1]),float(quaternion2[2]),float(quaternion2[3])]]
        # place_block_position3 = [[block_position3[0]-x_offset,block_position3[1],-0.20764+table_offset+0.02],[float(quaternion3[0]),float(quaternion3[1]),float(quaternion3[2]),float(quaternion3[3])]]
        place_block_position1 = [[block_position1[0]-x_offset+0.002-0.0003,block_position1[1],-0.20764+table_offset],[block_position1[2]]]
        place_block_position2 = [[block_position2[0]-x_offset-0.003,block_position2[1],-0.20764+table_offset],[block_position2[2]]]
        place_block_position3 = [[block_position3[0]-x_offset+0.002,block_position3[1],-0.20764+table_offset+0.015],[block_position3[2]]]

        return place_block_position1, place_block_position2, place_block_position3,sign

    def main(self):
        table_offset = -0.005
        # self.pick_block_height = -0.20764+table_offset
        self.pick_block_height = -0.20764+table_offset

        place_block_position1,place_block_position2,place_block_position3,sign = self.get_place_position()

        print "============ go to the first block postion..."
        sign,pick_position = self.pick_position_srv(sign)
        rospy.sleep(2)
        self.pick_and_place(pick_position, place_block_position1)

        print "============ go to the first block postion..."
        sign,pick_position = self.pick_position_srv(sign)
        rospy.sleep(2)
        self.pick_and_place(pick_position, place_block_position2)

        print "============ go to the first block postion..."
        sign,pick_position = self.pick_position_srv(sign)
        rospy.sleep(2)
        self.pick_and_place(pick_position, place_block_position3)


if __name__ == '__main__':
    try:
        block_loc = find_block()
        block_loc.main()
    except rospy.ROSInterruptException:
        pass
