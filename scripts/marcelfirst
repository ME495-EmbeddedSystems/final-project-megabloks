#!/usr/bin/env python

import time
import sys
import struct

import numpy as np
import roslib
import rospy

import baxter_interface
from baxter_core_msgs.msg import JointCommand
from geometry_msgs.msg import (
    PoseStamped,
    Pose,
    Point,
    Quaternion,
)
from std_msgs.msg import Header
from baxter_core_msgs.srv import (
    SolvePositionIK,
    SolvePositionIKRequest,
)


def main():
    rospy.init_node('marcelfirst')
    baxter_pub = rospy.Publisher('/robot/limb/left/joint_command', JointCommand, queue_size = 10)
    rate=rospy.Rate(10)
    command_time = 2.0
    start_time = time.time()
    total_time = 0
    while not rospy.is_shutdown() and total_time < command_time:
        jointcommand = JointCommand()
        jointcommand.mode = JointCommand.POSITION_MODE
        #JointCommand.VELOCITY_MODE
        jointcommand.command = [-1.08, -.22, 0.0, .9, 0.05, .95, -.35] #CLOSE -1.08, -.22, 0.0, 1.01, 0.05, .78, -.35 #OPEN -1.08, -.22, 0.0, .9, 0.05, .95, -.35
        jointcommand.names = ['left_s0', 'left_s1', 'left_e0', 'left_e1', 'left_w0', 'left_w1', 'left_w2']
        baxter_pub.publish(jointcommand)
        total_time = time.time() -  start_time

    total_time = 0
    start_time = time.time()
    while not rospy.is_shutdown() and total_time < command_time:
        jointcommand = JointCommand()
        jointcommand.mode = JointCommand.POSITION_MODE
        #JointCommand.VELOCITY_MODE
        jointcommand.command = [-1.08, -.22, 0.0, 1.01, 0.05, .78, -.35] #CLOSE -1.08, -.22, 0.0, 1.01, 0.05, .78, -.35 #OPEN -1.08, -.22, 0.0, .9, 0.05, .95, -.35
        jointcommand.names = ['left_s0', 'left_s1', 'left_e0', 'left_e1', 'left_w0', 'left_w1', 'left_w2']
        baxter_pub.publish(jointcommand)
        total_time = time.time() -  start_time

    total_time = 0
    start_time = time.time()
    while not rospy.is_shutdown() and total_time < command_time:
        jointcommand = JointCommand()
        jointcommand.mode = JointCommand.POSITION_MODE
        #JointCommand.VELOCITY_MODE
        jointcommand.command = [-1.08, -.22, 0.0, .9, 0.05, .95, -.35] #CLOSE -1.08, -.22, 0.0, 1.01, 0.05, .78, -.35 #OPEN -1.08, -.22, 0.0, .9, 0.05, .95, -.35
        jointcommand.names = ['left_s0', 'left_s1', 'left_e0', 'left_e1', 'left_w0', 'left_w1', 'left_w2']
        baxter_pub.publish(jointcommand)
        total_time = time.time() -  start_time


def ik_test(limb, eff_pos):
    xl, yl, zl = eff_pos
    xr, yr, zr = eff_pos
    rospy.init_node("rsdk_ik_service_client")
    ns = "ExternalTools/" + limb + "/PositionKinematicsNode/IKService"
    iksvc = rospy.ServiceProxy(ns, SolvePositionIK)
    ikreq = SolvePositionIKRequest()
    hdr = Header(stamp=rospy.Time.now(), frame_id='base')
    poses = {
        'left': PoseStamped(
            header=hdr,
            pose=Pose(
                position=Point(
                    x=0.0356982770038,
                    y=-0.852598021641,
                    z=0.0388609422173,
                ),
                orientation=Quaternion(
                    x=0,
                    y=0,
                    z=-0,
                    w=1.0,
                ),
            ),
        ),






        'right': PoseStamped(
            header=hdr,
            pose=Pose(
                position=Point(
                    x=0.656982770038,
                    y=-0.852598021641,
                    z=0.0388609422173,
                ),
                orientation=Quaternion(
                    x=0.367048116303,
                    y=0.885911751787,
                    z=-0.108908281936,
                    w=0.261868353356,
                ),
            ),
        ),
    }

    ikreq.pose_stamp.append(poses[limb])
    try:
        rospy.wait_for_service(ns, 5.0)
        resp = iksvc(ikreq)
    except (rospy.ServiceException, rospy.ROSException), e:
        rospy.logerr("Service call failed: %s" % (e,))
        return 1
    print(resp , 'hi')
    # Check if result valid, and type of seed ultimately used to get solution
    # convert rospy's string representation of uint8[]'s to int's
    resp_seeds = struct.unpack('<%dB' % len(resp.result_type),
                               resp.result_type)
    if (resp_seeds[0] != resp.RESULT_INVALID):
        seed_str = {
                    ikreq.SEED_USER: 'User Provided Seed',
                    ikreq.SEED_CURRENT: 'Current Joint Angles',
                    ikreq.SEED_NS_MAP: 'Nullspace Setpoints',
                   }.get(resp_seeds[0], 'None')
        print("SUCCESS - Valid Joint Solution Found from Seed Type: %s" %
              (seed_str,))
        # Format solution into Limb API-compatible dictionary
        limb_joints = dict(zip(resp.joints[0].name, resp.joints[0].position))
        print "\nIK Joint Solution:\n", limb_joints
        print "------------------"
        print "Response Message:\n", resp
    else:
        print("INVALID POSE - No Valid Joint Solution Found.")

    return 0

if __name__ == '__main__':
    eff_pos = [10, 20, 30]
    ik_test('left', eff_pos)
