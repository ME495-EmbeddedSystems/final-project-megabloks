#!/usr/bin/env python
"""
This node is simulate robot go to BLOCKS
"""

import sys
import copy
import rospy
import numpy as np
# from test import *

# get block location
#from gazebo_msgs.srv import GetModelState

# moveit
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list

import baxter_interface

class find_block(object):
    def __init__(self):
        # set up gazebo service to find block
        #self.model_coords = rospy.ServiceProxy('/gazebo/get_model_state',GetModelState)
        joint_state_topic = ['joint_states:=/robot/joint_states']
        rospy.init_node('find_block',anonymous=True)
        moveit_commander.roscpp_initialize(joint_state_topic)
        # initialize moveit commander
        moveit_commander.roscpp_initialize(sys.argv)
        robot = moveit_commander.RobotCommander()
        scene = moveit_commander.PlanningSceneInterface()
        group_name = 'left_arm'
        group = moveit_commander.MoveGroupCommander(group_name)
        display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                               moveit_msgs.msg.DisplayTrajectory,
                                               queue_size=20)

        planning_frame = group.get_planning_frame()
        print "============ Reference frame: %s" % planning_frame

        # We can also print the name of the end-effector link for this group:
        eef_link = group.get_end_effector_link()
        print "============ End effector: %s" % eef_link

        # We can get a list of all the groups in the robot:
        group_names = robot.get_group_names()
        print "============ Robot Groups:", robot.get_group_names()

        # Sometimes for debugging it is useful to print the entire state of the
        # robot:
        print "============ Printing robot state"
        print robot.get_current_state()
        print ""

        self.box_name = 'box'
        self.robot = robot
        self.scene = scene
        self.group = group
        # self.display_trajectory_publisher = display_trajectory_publisher
        # self.planning_frame = planning_frame
        self.eef_link = eef_link
        self.group_names = group_names

        # self._gripper = baxter_interface.Limb(group_name)
        table_offset = 0.08
        self._gripper = baxter_interface.Gripper("left", baxter_interface.CHECK_VERSION)
        rospy.set_param('pick_position', [[0.682995011987,0.0361733278331, -0.287095162438+table_offset],[-0.00868436126065,0.999768931835,0.00725217767718,0.0182776017772]])
        self.pick_position = rospy.get_param("pick_position")

        rospy.set_param('place_position', [[0.78020285436,0.138062951409,-0.28081543141+table_offset],[-0.0803725789232,0.9946345256,0.0223882639222,0.0611651426862]])
        self.place_position = rospy.get_param("place_position")
    
    '''
    All gazebo functions commented out because not currently in use
    '''
    #def get_location(self,model):
    #    self.object_coords = self.model_coords(model,'')
    #    x_pos = self.object_coords.pose.position.x
    #    y_pos = self.object_coords.pose.position.y
    #    z_pos = self.object_coords.pose.position.z
    #    return [x_pos, y_pos, z_pos]

    # def go_to_pose_goal(self,block):
    #     group = self.group
    #
    #     goal = self.get_location(block)
    #     pose_goal = geometry_msgs.msg.Pose()
    #     pose_goal.orientation.w = 1.0
    #     pose_goal.position.x = goal[0]
    #     pose_goal.position.y = goal[1]
    #     pose_goal.position.z = goal[2]
    #     group.set_pose_target(pose_goal)
    #
    #     group.set_pose_target(pose_goal)
    #
    #     plan = group.go(wait=True)
    #     group.stop()
    #     group.clear_pose_targets()

    '''
    All box functions commented out because not currently in use
    '''
    #def wait_for_state_update(self, box_is_known=False, box_is_attached=False, timeout=4):
    #    box_name = self.box_name
    #    scene = self.scene
    #    start = rospy.get_time()
    #    seconds = rospy.get_time()
    #    while (seconds - start < timeout) and not rospy.is_shutdown():
    #      attached_objects = scene.get_attached_objects([box_name])
    #      is_attached = len(attached_objects.keys()) > 0
    #      is_known = box_name in scene.get_known_object_names()
    #      if (box_is_attached == is_attached) and (box_is_known == is_known):
    #        return True
    #      rospy.sleep(0.1)
    #      seconds = rospy.get_time()
    #    return False

    #def add_box(self, timeout=4):
    #    box_name = self.box_name
    #    scene = self.scene
    #    box_pose = geometry_msgs.msg.PoseStamped()
    #    box_pose.header.frame_id = "l_gripper_l_finger_tip"
    #    box_pose.pose.orientation.w = 1.0
    #    box_pose.pose.position.z = 0.05 # slightly above the end effector
    #    box_pose.pose.position.y = -0.025
    #    box_name = "box"
    #    scene.add_box(box_name, box_pose, size=(0.05, 0.05, 0.05))
    #    self.box_name=box_name
    #    return self.wait_for_state_update(box_is_known=True, timeout=timeout)

    #def attach_box(self, timeout=4):
    #    box_name = self.box_name
    #    robot = self.robot
    #    scene = self.scene
    #    eef_link = self.eef_link
    #    group_names = self.group_names

    #    grasping_group = 'left_hand'
    #    touch_links = robot.get_link_names(group=grasping_group)
    #    scene.attach_box(eef_link, box_name, touch_links=touch_links)
    #    return self.wait_for_state_update(box_is_attached=True, box_is_known=False, timeout=timeout)


    #def detach_box(self, timeout=4):
    #    box_name = self.box_name
    #    scene = self.scene
    #    eef_link = self.eef_link
    #    scene.remove_attached_object(eef_link, name=box_name)
    #    return self.wait_for_state_update(box_is_known=True, box_is_attached=False, timeout=timeout)

    #def remove_box(self, timeout=4):
    #    box_name = self.box_name
    #    scene = self.scene
    #    scene.remove_world_object(box_name)
    #    return self.wait_for_state_update(box_is_attached=False, box_is_known=False, timeout=timeout)

    '''
    Working functions: go to goal pose (moveit)
    '''
    def go_to_pose_goal_1(self,position,orientation):
        group = self.group

        # goal = self.get_location(block)
        pose_goal = geometry_msgs.msg.Pose()
        pose_goal.orientation.x = orientation[0]
        pose_goal.orientation.y = orientation[1]
        pose_goal.orientation.z = orientation[2]
        pose_goal.orientation.w = orientation[3]
        pose_goal.position.x = position[0]
        pose_goal.position.y = position[1]
        pose_goal.position.z = position[2]
        group.set_pose_target(pose_goal)

        plan = group.go(wait=True)
        group.stop()
        group.clear_pose_targets()
        # current_pose = group.get_current_pose().pose

    '''
    Working functions: go to goal pose (moveit-cartesian paths)
    '''
    # plan _1 go -z direction
    def plan_cartesian_path_1(self, scale=1):
        group = self.group
        waypoints = []

        wpose = group.get_current_pose().pose
        wpose.position.z += scale * 0.1  # First move down (z)
        # wpose.position.y += scale * 0.2  # and sideways (y)
        waypoints.append(copy.deepcopy(wpose))

        # wpose.position.y += scale * 0.1
        # waypoints.append(copy.deepcopy(wpose))
        # wpose.position.x += scale * 0.1  # Second move forward/backwards in (x)
        # waypoints.append(copy.deepcopy(wpose))

        # wpose.position.y -= scale * 0.1  # Third move sideways (y)
        # waypoints.append(copy.deepcopy(wpose))

        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    # plan_2 go +z direction
    def plan_cartesian_path_2(self, scale=1):
        group = self.group
        waypoints = []

        wpose = group.get_current_pose().pose
        wpose.position.z -= scale * 0.1  # First move up (z)
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    # plan_3 go to horizontal direction
    def plan_cartesian_path_3(self, scale=1):
        group = self.group
        waypoints = []
        # get current state
        wpose = group.get_current_pose().pose
        # find the difference between current state and y_direction
        y_distance = self.place_position[0][1]- wpose.position.y
        # find the difference between current state and x_direction
        x_distance = self.place_position[0][0]- wpose.position.x
        wpose.position.y -= scale * y_distance  # move towards right "-",
        wpose.position.x -= scale * x_distance
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    def plan_cartesian_path_4(self, scale=1):
        group = self.group
        waypoints = []

        wpose = group.get_current_pose().pose
        z_distance = self.place_position[0][2]- wpose.position.z
        wpose.position.z -= scale * z_distance  # First move down (z)
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction

    '''
    General purpose functions for executing plann, gripper, and force control
    '''

    def execute_plan(self, plan):
        group = self.group
        group.execute(plan, wait=True)

    def gripper_close(self):
        # self._gripper.reboot()
        self._gripper.close()
        # self._gripper.calibrate()
        # self._gripper.close()
        # rospy.sleep(1.0)

    def gripper_open(self):
        # self._gripper.reboot()
        self._gripper.open()
        # self._gripper.calibrate()
        # self._gripper.open()
        # rospy.sleep(1.0)

    def force_control(self,reset):
        # self._gripper.calibrate(block=True)
        current_force = self._gripper.parameters()['moving_force']
        print("current force {}" .format(current_force))
        offset = 40.0

        if reset == 1:
            a = 10.0
            holdforce = 30.0
        else:
            a = current_force + offset
            holdforce = 40.0

        self._gripper.set_holding_force(holdforce)
        self._gripper.set_moving_force(a)
        current_force = self._gripper.parameters()['moving_force']
        dead_zone = self._gripper.parameters()['dead_zone']
        holding_force = self._gripper.parameters()['holding_force']

        print("holding_force {}" .format(holding_force))
        print("new_current force {}" .format(current_force))
        print(" dead_zone {}" .format(dead_zone))

    '''
    Main function
    '''
    def main(self):
        # p = PickAndPlace('left_arm',hover_distance = 0.15)
        # rospy.init_node('find_block',anonymous=True)
        print "============ Press `Enter` to go above pick position ..."
        raw_input()
        self.gripper_open()
        #self._gripper.calibrate(block=True)
        self._gripper.set_dead_band(1.0)
        self.force_control(1)
        # position1 = [0.7062,0.49816,0.186]
        # orientation_1 = [0.13641,0.99033,0.0066117,0.024333]
        pick_position1 = self.pick_position[0]
        pick_position1[2] = self.pick_position[0][2]+0.1
        print pick_position1
        pick_orientation_1 = self.pick_position[1]
        print pick_orientation_1
        self.go_to_pose_goal_1(pick_position1,pick_orientation_1)
        # print "============ Press `Enter` to go at pick position ..."
        # raw_input()
        # position2 = self.pick_position[0]
        # position2[2] = self.pick_position[0][2]-0.1
        # print position2
        # orientation_2 = self.pick_position[1]
        # print orientation_2
        # self.go_to_pose_goal_1(position2,orientation_2)
        print "============ Press `Enter` to go down ..."
        raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_1(scale=-1)
        self.execute_plan(cartesian_plan)
        print "============ Press `Enter` to close gripper  ..."
        raw_input()
        self.gripper_close()
        # print "============ Press `Enter` to go to add_box ..."
        # raw_input()
        # self.add_box()
        # self.attach_box()
        print "============ Press `Enter` to go up ..."
        raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_2(scale=-1)
        self.execute_plan(cartesian_plan)
        print "============ Press `Enter` to go horizontal torward the position to drop box..."
        raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_3(scale=-1)
        self.execute_plan(cartesian_plan)
        print "============ Press `Enter` to go vertical  and add force..."
        raw_input()
        self.force_control(0)
        cartesian_plan, fraction = self.plan_cartesian_path_4(scale=-1)
        self.execute_plan(cartesian_plan)
        # self.go_to_pose_goal_1(position2)
        # self. go_to_pose_goal('block1')
        # self. go_to_pose_goal('block2')
        # print "============ Press `Enter` to open gripper  ..."
        # raw_input()
        self.force_control(1)
        rospy.sleep(5)
        self.gripper_open()
        print "============ Press `Enter` to go vertical  and add force..."
        raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_2(scale=-1)
        self.execute_plan(cartesian_plan)
        print "============ Press `Enter` to close gripper  ..."
        raw_input()
        self.gripper_close()
        self.force_control(0)
        print "============ Press `Enter` to go down ..."
        raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path_1(scale=-1)
        self.execute_plan(cartesian_plan)
        rospy.sleep(5)
        print "============  to go up ..."

        cartesian_plan, fraction = self.plan_cartesian_path_2(scale=-1)
        self.execute_plan(cartesian_plan)
        self.force_control(1)
        # rospy.spin()


if __name__ == '__main__':
    try:
        block_loc = find_block()
        block_loc.main()
    except rospy.ROSInterruptException:
        pass
