#!/usr/bin/env python
"""
Spawns dummy configuration for testing and moves arm to 'start' position
"""

import argparse
import struct
import sys
import copy

import rospy
import rospkg
import numpy as np
from tf.transformations import quaternion_from_euler as angle_trans

from gazebo_msgs.srv import (
    SpawnModel,
    DeleteModel,
)
from geometry_msgs.msg import (
    PoseStamped,
    Pose,
    Point,
    Quaternion,
)
from std_msgs.msg import (
    Header,
    Empty,
)

import baxter_interface

class setup(object):
    def __init__(self, limb, hover_distance = 0.15, verbose=True):
        self._limb_name = limb # string
        self._hover_distance = hover_distance # in meters
        self._verbose = verbose # bool
        self._limb = baxter_interface.Limb(limb)
        self._gripper = baxter_interface.Gripper(limb)
        # verify robot is enabled
        print("Getting robot state... ")
        self._rs = baxter_interface.RobotEnable(baxter_interface.CHECK_VERSION)
        self._init_state = self._rs.state().enabled
        print("Enabling robot... ")
        self._rs.enable()

    def move_to_start(self, start_angles=None):
        print("Moving the {0} arm to start pose...".format(self._limb_name))
        if not start_angles:
            start_angles = dict(zip(self._joint_names, [0]*7))
        self._guarded_move_to_joint_position(start_angles)
        self.gripper_open()
        rospy.sleep(1.0)

    def _guarded_move_to_joint_position(self, joint_angles):
        if joint_angles:
            self._limb.move_to_joint_positions(joint_angles)
        else:
            rospy.logerr("No Joint Angles provided for move_to_joint_positions. Staying put.")

    def gripper_open(self):
        self._gripper.open()
        rospy.sleep(1.0)

    def gripper_close(self):
        self._gripper.close()
        rospy.sleep(1.0)

def load_gazebo_models(num_blocks=3):
    
    # Specify reference frames
    table_reference_frame="world"
    block_reference_frame="world"
    
    # Get Models' Path
    model_path = rospkg.RosPack().get_path('blocks')+"/models/"

    # Load Table SDF
    table_xml = ''
    with open (model_path + "cafe_table/model.sdf", "r") as table_file:
        table_xml=table_file.read().replace('\n', '')

    # Load Base Plate URDF
    baseplate_xml = ''
    with open (model_path + "base_plate/model.urdf", "r") as baseplate_file:
        base_plate_xml=baseplate_file.read().replace('\n', '')

    # Load Block URDFs
    block_red_xml = ''
    with open (model_path + "block/model_red.urdf", "r") as block_file:
        block_red_xml=block_file.read().replace('\n', '')
    block_blue_xml = ''
    with open (model_path + "block/model_green.urdf", "r") as block_file:
        block_blue_xml=block_file.read().replace('\n', '')
    block_green_xml = ''
    with open (model_path + "block/model_blue.urdf", "r") as block_file:
        block_green_xml=block_file.read().replace('\n', '')
    blocks = [block_red_xml, block_blue_xml, block_green_xml]
    
    # Spawn Table SDF
    rospy.wait_for_service('/gazebo/spawn_sdf_model')
    try:
        table_pose=Pose(position=Point(x=1.0, y=0.0, z=0.0))
        spawn_sdf = rospy.ServiceProxy('/gazebo/spawn_sdf_model', SpawnModel)
        resp_sdf = spawn_sdf("cafe_table", table_xml, "/",
                             table_pose, table_reference_frame)
    except rospy.ServiceException, e:
        rospy.logerr("Spawn SDF service call failed: {0}".format(e))
    
    # Spawn Base Plate URDF
    rospy.wait_for_service('/gazebo/spawn_urdf_model')
    try:
        base_plate_pose=Pose(position=Point(x=0.8, y=-0.4, z=0.7825))
        spawn_urdf = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
        resp_urdf = spawn_urdf("base_plate", base_plate_xml, "/",
                                base_plate_pose, block_reference_frame)
    except rospy.ServiceException, e:
        rospy.logerr("Spawn URDF service call failed: {0}".format(e))

    # Spawn Blocks URDF
    x_range = [0.65, 1.35]
    y_range = [0.1, 0.35]
    yaw_range = [0,np.pi*2]

    x_options = np.arange(x_range[0],x_range[1],0.1)
    y_options = np.arange(y_range[0],y_range[1],0.1)


    for i in range(num_blocks):
        try:
            block_spawn = blocks[np.random.choice(range(3))]
            x_pos = np.random.choice(x_options)
            y_pos = np.random.choice(y_options)
            angle_pos = np.random.choice(np.arange(yaw_range[0],yaw_range[1],np.pi/2))
            angle_quat = angle_trans(0,0,angle_pos)
            angle = Quaternion(x = angle_quat[0], y = angle_quat[1], z = angle_quat[2], w = angle_quat[3])
            block_pose= Pose(position=Point(x=x_pos, y=y_pos, z=0.8),orientation=angle)
            resp_urdf = spawn_urdf("block{}".format(i), block_spawn, "/",
                                   block_pose, block_reference_frame)
        except rospy.ServiceException, e:
            rospy.logerr("Spawn URDF service call failed: {0}".format(e))
    
def delete_gazebo_models():
    # This will be called on ROS Exit, deleting Gazebo models
    # Do not wait for the Gazebo Delete Model service, since
    # Gazebo should already be running. If the service is not
    # available since Gazebo has been killed, it is fine to error out
    try:
        delete_model = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)
        resp_delete = delete_model("cafe_table")
        resp_delete = delete_model("base_plate")
        for i in range(num_blocks):
            resp_delete = delete_model("block{}".format(i))
    except rospy.ServiceException, e:
        rospy.loginfo("Delete Model service call failed: {0}".format(e))

def main():
    global num_blocks 
    num_blocks = 12

    rospy.init_node("dummy_demo")
    # load models into world
    load_gazebo_models(num_blocks)
    
    # remove models from the scene on shutdown
    rospy.on_shutdown(delete_gazebo_models)

    # wait for the All Clear from emulator startup
    rospy.wait_for_message("/robot/sim/started", Empty)
    
    limb = 'left'
    hover_distance = 0.15 # meters
    # Starting Joint angles for left arm
    starting_joint_angles = {'left_w0': 0.6699952259595108,
                             'left_w1': 1.030009435085784,
                             'left_w2': -0.4999997247485215,
                             'left_e0': -1.189968899785275,
                             'left_e1': 1.9400238130755056,
                             'left_s0': -0.08000397926829805,
                             'left_s1': -0.9999781166910306}
    stp = setup(limb,hover_distance) 
    # Note that the models reference is the /world frame
    # An orientation for gripper fingers to be overhead and parallel to the obj
    overhead_orientation = Quaternion(
                             x=-0.0249590815779,
                             y=0.999649402929,
                             z=0.00737916180073,
                             w=0.00486450832011)
    
    block_poses = list()
    # The Pose of the block in its initial location.
    # You may wish to replace these poses with estimates
    # from a perception node.
    block_poses.append(Pose(
        position=Point(x=0.7, y=0.15, z=-0.129),
        orientation=overhead_orientation))
    # Feel free to add additional desired poses for the object.
    # Each additional pose will get its own pick and place.
    block_poses.append(Pose(
        position=Point(x=0.75, y=0.0, z=-0.129),
        orientation=overhead_orientation))
    
    # Move to the desired starting angles
    stp.move_to_start(starting_joint_angles)

    rospy.spin()

if __name__ == '__main__':
    sys.exit(main())
